package MainFolder;

import java.util.Date;

/**
 ************ Class Deal сверен с оригиналом 29 11 2016 / 16-44  ************************
 */
public class Deal
{
    /*
     Можно создавать объект заполняя поля переменных через сеттеры
     (это в случае оперативного изменения значений в течении использования программы),
     а можно заполнять поля переменных, передавая их значения через аргументы
     конструктора (это в случае разового заполнения полей переменных).
     Принимаем, что для Deal условия создания объекта не меняются -
     как создали его один раз так он и работает на протяжении всей программы.
      */
    /* записать значение date можно сразу или через конструктор
     Запись СРАЗУ - следующая   */
    private Date date;
    private Party buyer;
    private Party seller;
    private Product[] products;
    //Gettery
    public Date getDate(){return date;}
    public Party getBuyer() {return buyer;}
    public Party getSeller() {return seller;}
    public Product[] getProducts() {return products;}  // Обязательно необходимо проставить
    // квадратные скобки "Product[]"
    /* Запись ЧЕРЕЗ КОНСТРУКТОР БЕЗ ПАРАМЕТРОВ (если только одна дата)  - следующая*/
    // public Deal() {date = new Date();}
    /* Запись ЧЕРЕЗ КОНСТРУКТОР С ПАРАМЕТРАМИ (если заносить все поля)  - следующая*/
    public Deal(Party buyer, Party seller, Product[] products)
    {
        date = new Date();
        this.buyer = buyer;
        this.seller = seller;
        this.products = products;
    }
    /* В этом случае создается конструктор (а не группа сеттеров) для одноразового
    задания значений полей при создании объекта Deal
    Здесь, если в аргументах Deal(...) дать другие имена аргументов, то от использования
    this. можно отказаться. Но не рекомендуют, т.к. имена должны иметь осмысленные названия*/

    // Напишем метод getSum()
    public double getSum()
    {
        double rez = 0;
        /* Сокращенная запись функционально означает, что цикл возьмет массив products и
        будет бежать по каждому его элементу и записывать его значение в переменную pr,
        типa Product, которая будет доступна только в этом блоке for и будет принимать
        последовательно значение каждого элемента этого массива. В качестве "products"
        может присутствовать либо массив [] либо list. Это применяется в случае, если индекс
        внутреннего шага цикла не важен.*/
        for (Product pr : products)
        {
            rez += pr.getCost();
        }
            return rez;
    }
}
